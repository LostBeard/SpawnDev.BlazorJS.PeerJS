@page "/"
@using SpawnDev.BlazorJS.JSObjects;
@using System.Text;
@using System.Text.Json;
@using SpawnDev.BlazorJS.JSObjects.WebRTC;
@using SpawnDev.BlazorJS.Toolbox;
@using System.Reflection;
@implements IDisposable

<PageTitle>SpawnDev.BlazorJS.PeerJS</PageTitle>

<h1>SpawnDev.BlazorJS.PeerJS</h1>

<small>Open two windows and copy the ID from one to the other and click connect</small>
<br />
<a href="@($"{new Uri(NavigationManager.Uri).GetLeftPart(UriPartial.Path)}?targetId={id}")" target="_blank">Open in new window</a>
<br />

<div>
    <input style="width: 350px;" @bind=@id readonly />
</div>
<div>
    <input placeholder="Remote Id" style="width: 350px;" @bind=@targetId />
    <button @onclick=@Connect>connect</button>
    <button @onclick=@StartMediaCall>call</button>
</div>
<div>
    <input placeholder="message" style="width: 350px;" @bind=@msg />
    <button @onclick=@Send>send</button>
</div>
<div style="width: 320px; height: 240px; position: relative;">
    <video style="border: 1px solid black; height: 100%; width: 100%;" width="320" @ref="incomingVideoElRef" autoplay></video>
    <video style="border: 1px solid orange; height: 40px; width: 60px; position: absolute; right: 10px; bottom: 10px;" @ref="outgoingVideoElRef" autoplay></video>
</div>
<div>
    <span>Connect using QRCode from <a href="https://github.com/LostBeard/SpawnDev.Blazor.QRCodeRenderer">SpawnDev.Blazor.QRCodeRenderer</a></span><br />
    <QRCodeImage DataTextType="DataTextType.UriRelativeUrl" DataText="@($"?targetId={id}")" />
</div>
<pre style="width: 600px; word-wrap: break-word; white-space: normal;">@((MarkupString)log)</pre>

@code {
    ElementReference outgoingVideoElRef;
    ElementReference incomingVideoElRef;
    HTMLVideoElement? outgoingVideoEl = null;
    HTMLVideoElement? incomingVideoEl = null;
    [Inject] NavigationManager NavigationManager { get; set; }
    [Inject] BlazorJSRuntime JS { get; set; }
    [Inject] IServiceProvider ServiceProvider { get; set; }
    Peer? peer = null;
    DataConnection? dataConnection = null;
    string id = "";
    [SupplyParameterFromQuery]
    string targetId { get; set; } = "";
    string msg = "";
    string log = "";
    MediaConnection? call = null;
    MediaStream? outgoingCallStream = null;
    MediaStream? incomingCallStream = null;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Load the PeerJS Javascript library.
            // the library can be loaded in the index.html instead
            await Peer.Init();
            peer = new Peer();
            peer.OnOpen += Peer_OnOpen;
            peer.OnClose += Peer_OnClose;
            peer.OnError += Peer_OnError;
            peer.OnConnection += Peer_OnConnection;
            peer.OnCall += Peer_OnCall;
            // get video element references
            outgoingVideoEl = new HTMLVideoElement(outgoingVideoElRef);
            incomingVideoEl = new HTMLVideoElement(incomingVideoElRef);
        }
    }

    async Task StopMediaCall()
    {
        if (call == null) return;
        call.Close();
        call.Dispose();
        call = null;
    }

    async Task StartLocalMediaStream()
    {
        if (outgoingCallStream != null) return;
        try
        {
            using var navigator = JS.Get<Navigator>("navigator");
            using var mediaDevices = navigator.MediaDevices;
            outgoingCallStream = await mediaDevices.GetUserMedia(true, false);
            outgoingVideoEl!.SrcObject = outgoingCallStream!;
        }
        catch (Exception ex)
        {
            log += $"Failed to get local stream<br/>";
        }
    }

    async Task StartMediaCall()
    {
        if (peer == null) return;
        if (call != null) return;
        await StartLocalMediaStream();
        if (outgoingCallStream == null) return;
        var outgoingCall = peer.Call(targetId, outgoingCallStream);
        await InitMediaConnection(outgoingCall, false);
    }

    void Call_OnStream(MediaStream mediaStream)
    {
        incomingCallStream = mediaStream;
        incomingVideoEl!.SrcObject = incomingCallStream!;
    }

    void Log(string msg)
    {
        log += $"{msg}<br/>";
        StateHasChanged();
    }

    void Peer_OnConnection(DataConnection dataConnection)
    {
        Log("Peer_OnConnection");
        if (targetId != dataConnection.Peer) targetId = dataConnection.Peer;
        InitDataConnection(dataConnection);
        StateHasChanged();
    }

    async Task InitMediaConnection(MediaConnection mediaConnection, bool incoming)
    {
        call = mediaConnection;
        call.OnStream += Call_OnStream;
        if (incoming)
        {
            await StartLocalMediaStream();
            call.Answer(outgoingCallStream);
        }
    }

    void Peer_OnCall(MediaConnection mediaConnection)
    {
        Log($"Peer_OnCall: {mediaConnection.Type}");
        if (targetId != mediaConnection.Peer) targetId = mediaConnection.Peer;
        _ = InitMediaConnection(mediaConnection, true);
        StateHasChanged();
    }

    void Connect()
    {
        if (peer == null || string.IsNullOrEmpty(targetId)) return;
        Log("Connect");
        InitDataConnection(peer.Connect(targetId));
    }

    void InitDataConnection(DataConnection dataConnection)
    {
        DisposeDataConnection();
        this.dataConnection = dataConnection;
        Log($"InitDataConnection: {dataConnection.Label}");
        dataConnection.OnOpen += DataConnection_OnOpen;
        dataConnection.OnClose += DataConnection_OnClose;
        dataConnection.OnData += DataConnection_OnData;
        dataConnection.OnError += DataConnection_OnError;
    }

    void DataConnection_OnData(JSObject msg)
    {
        if (msg.JSRef!.ConstructorName() == "String")
        {
            Log(">> " + msg.JSRefAs<string>());
        }
    }

    void DataConnection_OnOpen()
    {
        Log("DataConnection_OnOpen");
        Send($"Hello from {id}");
    }

    void DataConnection_OnClose()
    {
        Log("DataConnection_OnClose");
        DisposeDataConnection();
    }

    void DataConnection_OnError(PeerError error)
    {
        Log($"DataConnection_OnError: {error.Type}");
    }

    void DisposeDataConnection()
    {
        if (dataConnection != null)
        {
            dataConnection.OnOpen -= DataConnection_OnOpen;
            dataConnection.OnClose -= DataConnection_OnClose;
            dataConnection.OnData -= DataConnection_OnData;
            dataConnection.OnError -= DataConnection_OnError;
            dataConnection.Dispose();
            dataConnection = null;
        }
    }

    void Send(string msg)
    {
        if (dataConnection == null) return;
        dataConnection.Send(msg);
        Log($"<< {msg}");
    }

    void Send() => Send(msg);

    void Peer_OnOpen(string id)
    {
        this.id = id;
        Log($"Peer_OnOpen: {id}");
        StateHasChanged();
        if (!string.IsNullOrEmpty(targetId)) Connect();
    }

    void Peer_OnClose()
    {
        Log("Peer_OnClose");
    }

    void Peer_OnError(PeerError error)
    {
        Log($"Peer_OnError: {error.Type}");
    }

    public void Dispose()
    {
        DisposeDataConnection();
        if (peer != null)
        {
            peer.OnOpen -= Peer_OnOpen;
            peer.OnClose -= Peer_OnClose;
            peer.OnError += Peer_OnError;
            peer.OnConnection -= Peer_OnConnection;
            peer.OnCall -= Peer_OnCall;
            peer.Destroy();
            peer.Dispose();
            peer = null;
        }
    }
}
